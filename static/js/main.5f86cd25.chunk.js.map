{"version":3,"sources":["utils/validators.js","components/PopForm.jsx","utils/time.js","components/RepoLink.jsx","components/ForkLine.jsx","components/ResultTable.jsx","components/ErrorDialog.jsx","utils/graphql.js","utils/search.js","components/Container.jsx","components/Footer.jsx","components/Navigation.jsx","App.jsx","index.jsx"],"names":["repoRegex","urlMatch","url","match","SearchIcon","loading","icon","spin","PopForm","onSubmit","useState","setUrl","handleSubmit","e","preventDefault","stopPropagation","isInvalid","Form","InputGroup","className","FormControl","placeholder","onChange","target","value","Append","Button","type","variant","onClick","timeSince","date","seconds","Math","floor","Date","now","interval","RepoLink","nameWithOwner","href","ForkLine","info","stargazerCount","forkCount","object","history","totalCount","parse","committedDate","paginatedForks","forks","activePage","itemsCountPerPage","slice","SortIcon","direction","column","orderBy","HeaderModified","onHeaderClick","sortByCommittedDate","OverlayTrigger","transition","overlay","Tooltip","ResultTable","onPageChange","sortedForks","setSortedForks","setOrderBy","sortByNameWithOwner","a","b","toLowerCase","localeCompare","sortByNumber","getAttribute","sortByStargazerCount","x","sortByForkCount","sortByCommits","orderByField","sortFunc","toggledDirection","orderByDirection","directionFunc","sort","Table","striped","bordered","hover","map","fork","itemClass","linkClass","totalItemsCount","length","pageRangeDisplayed","ErrorDialog","detail","onClose","show","setShow","Modal","onHide","animation","Header","closeButton","Title","Body","defaultProps","httpLink","createHttpLink","uri","token","atob","process","assert","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","GET_FORKS_QUERY","gql","searchPopularForks","onResult","onError","splitUrl","owner","name","query","variables","then","result","catch","error","Container","setForks","errorDetail","setErrorDetail","setActivePage","setLoading","data","repository","nodes","errorDialog","message","resultTable","Footer","version","Navigation","Navbar","bg","expand","Brand","Toggle","Collapse","Nav","Link","library","add","fab","fas","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f86cd25.chunk.js","sourcesContent":["const repoRegex = /https?:\\/\\/github.com\\/([\\w-_]+)\\/([\\w-_]+)/;\n\nconst urlMatch = (url) => (\n  url && url.match(repoRegex) || null\n);\n\n/**\n * Splits URL to owner and repo name.\n */\nconst splitUrl = (url) => (\n  urlMatch(url) && urlMatch(url).slice(1, 3)\n);\n\nexport {\n  urlMatch,\n  splitUrl,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button, Form, FormControl, InputGroup,\n} from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { urlMatch } from '../utils/validators';\n\nconst SearchIcon = ({ loading }) => (\n  <FontAwesomeIcon icon={loading ? 'spinner' : 'search'} spin={loading} />\n);\nSearchIcon.propTypes = {\n  loading: PropTypes.bool.isRequired,\n};\n\nconst PopForm = ({ onSubmit, loading }) => {\n  const [url, setUrl] = useState();\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (urlMatch(url) === null) {\n      e.stopPropagation();\n    } else {\n      onSubmit(url);\n    }\n  };\n  const isInvalid = url && urlMatch(url) === null;\n  return (\n    <Form onSubmit={handleSubmit}>\n      <InputGroup className=\"mb-3\">\n        <FormControl\n          placeholder=\"https://github.com/django/django\"\n          onChange={(e) => setUrl(e.target.value)}\n          isInvalid={isInvalid}\n        />\n        <InputGroup.Append>\n          <Button type=\"submit\" variant=\"outline-secondary\" onClick={handleSubmit}>\n            <SearchIcon loading={loading} />\n          </Button>\n        </InputGroup.Append>\n      </InputGroup>\n    </Form>\n  );\n};\nPopForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n};\n\nexport default PopForm;\n","/**\n * https://stackoverflow.com/a/3177838\n */\nconst timeSince = (date) => {\n  const seconds = Math.floor((Date.now() - date) / 1000);\n  let interval = seconds / 31536000;\n  if (interval > 1) {\n    return `${Math.floor(interval)} years ago`;\n  }\n  interval = seconds / 2592000;\n  if (interval > 1) {\n    return `${Math.floor(interval)} months ago`;\n  }\n  interval = seconds / 86400;\n  if (interval > 1) {\n    return `${Math.floor(interval)} days ago`;\n  }\n  interval = seconds / 3600;\n  if (interval > 1) {\n    return `${Math.floor(interval)} hours ago`;\n  }\n  interval = seconds / 60;\n  if (interval > 1) {\n    return `${Math.floor(interval)} minutes ago`;\n  }\n  return `${Math.floor(seconds)} seconds ago`;\n};\n\nexport default timeSince;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst RepoLink = ({ nameWithOwner }) => (\n  <a href={`https://github.com/${nameWithOwner}`}>\n    {nameWithOwner}\n  </a>\n);\nRepoLink.propTypes = {\n  nameWithOwner: PropTypes.string.isRequired,\n};\n\nexport default RepoLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport timeSince from '../utils/time';\nimport RepoLink from './RepoLink';\n\nconst ForkLine = ({ info }) => (\n  <tr>\n    <td><RepoLink nameWithOwner={info.nameWithOwner} /></td>\n    <td>{info.stargazerCount}</td>\n    <td>{info.forkCount}</td>\n    <td>{info.object.history.totalCount}</td>\n    <td>{timeSince(Date.parse(info.object.committedDate))}</td>\n  </tr>\n);\nForkLine.propTypes = {\n  info: PropTypes.shape({\n    nameWithOwner: PropTypes.string.isRequired,\n    stargazerCount: PropTypes.number.isRequired,\n    forkCount: PropTypes.number.isRequired,\n    object: PropTypes.shape({\n      committedDate: PropTypes.string.isRequired,\n      history: PropTypes.shape({\n        totalCount: PropTypes.number.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default ForkLine;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  OverlayTrigger, Table, Tooltip,\n} from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Pagination from 'react-js-pagination';\nimport ForkLine from './ForkLine';\n\nconst paginatedForks = (forks, activePage, itemsCountPerPage) => (\n  forks.slice((activePage - 1) * itemsCountPerPage, activePage * itemsCountPerPage)\n);\n\nconst sortIconDirection = (direction) => (\n  direction === 'asc' ? 'sort-down' : 'sort-up'\n);\n\nconst SortIcon = ({ column, orderBy }) => (\n  <FontAwesomeIcon\n    icon={orderBy.column === column ? sortIconDirection(orderBy.direction) : 'sort'}\n  />\n);\nSortIcon.propTypes = {\n  column: PropTypes.string.isRequired,\n  orderBy: PropTypes.shape({\n    column: PropTypes.string.isRequired,\n    direction: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nconst HeaderModified = ({ onHeaderClick, sortByCommittedDate, orderBy }) => (\n  <OverlayTrigger\n    transition={false}\n    overlay={(\n      <Tooltip>\n        Last commit on master.\n      </Tooltip>\n    )}\n  >\n    <th onClick={() => onHeaderClick('committedDate', sortByCommittedDate)}>\n      <FontAwesomeIcon icon=\"calendar-alt\" />\n      {' '}\n      Modified\n      {' '}\n      <SortIcon column=\"committedDate\" orderBy={orderBy} />\n    </th>\n  </OverlayTrigger>\n);\nHeaderModified.propTypes = {\n  onHeaderClick: PropTypes.func.isRequired,\n  sortByCommittedDate: PropTypes.func.isRequired,\n  orderBy: PropTypes.shape({\n    column: PropTypes.string.isRequired,\n    direction: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nconst ResultTable = ({\n  forks, activePage, itemsCountPerPage, onPageChange,\n}) => {\n  const [sortedForks, setSortedForks] = useState(forks);\n  const [orderBy, setOrderBy] = useState({\n    column: 'stargazerCount',\n    direction: 'desc',\n  });\n  const sortByNameWithOwner = (a, b) => (\n    a.nameWithOwner.toLowerCase().localeCompare(b.nameWithOwner.toLowerCase())\n  );\n  const sortByNumber = (getAttribute) => (a, b) => (getAttribute(a) - getAttribute(b));\n  const sortByStargazerCount = sortByNumber((x) => x.stargazerCount);\n  const sortByForkCount = sortByNumber((x) => x.forkCount);\n  const sortByCommits = sortByNumber((x) => x.object.history.totalCount);\n  const sortByCommittedDate = sortByNumber((x) => Date.parse(x.object.committedDate));\n  const onHeaderClick = (orderByField, sortFunc) => {\n    // change direction only if the same order was selected\n    const toggledDirection = orderBy.direction === 'asc' ? 'desc' : 'asc';\n    const orderByDirection = orderByField === orderBy.column ? toggledDirection : orderBy.direction;\n    const directionFunc = orderByDirection === 'asc' ? 'slice' : 'reverse';\n    setSortedForks(forks.slice().sort(sortFunc)[directionFunc]());\n    setOrderBy({ column: orderByField, direction: orderByDirection });\n  };\n  return (\n    <>\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th onClick={() => onHeaderClick('nameWithOwner', sortByNameWithOwner)}>\n              <FontAwesomeIcon icon={['fab', 'github-alt']} />\n              {' '}\n              Repo\n              {' '}\n              <SortIcon column=\"nameWithOwner\" orderBy={orderBy} />\n            </th>\n            <th onClick={() => onHeaderClick('stargazerCount', sortByStargazerCount)}>\n              <FontAwesomeIcon icon=\"star\" />\n              {' '}\n              Stars\n              {' '}\n              <SortIcon column=\"stargazerCount\" orderBy={orderBy} />\n            </th>\n            <th onClick={() => onHeaderClick('forkCount', sortByForkCount)}>\n              <FontAwesomeIcon icon=\"code-branch\" />\n              {' '}\n              Forks\n              {' '}\n              <SortIcon column=\"forkCount\" orderBy={orderBy} />\n            </th>\n            <th onClick={() => onHeaderClick('commits', sortByCommits)}>\n              <FontAwesomeIcon icon=\"dot-circle\" />\n              {' '}\n              Commits\n              {' '}\n              <SortIcon column=\"commits\" orderBy={orderBy} />\n            </th>\n            <HeaderModified\n              onHeaderClick={onHeaderClick}\n              sortByCommittedDate={sortByCommittedDate}\n              orderBy={orderBy}\n            />\n          </tr>\n        </thead>\n        <tbody>\n          {\n          paginatedForks(\n            sortedForks,\n            activePage,\n            itemsCountPerPage,\n          ).map(\n            (fork) => <ForkLine key={fork.nameWithOwner} info={fork} />,\n          )\n        }\n        </tbody>\n      </Table>\n      <Pagination\n        itemClass=\"page-item\"\n        linkClass=\"page-link\"\n        activePage={activePage}\n        itemsCountPerPage={itemsCountPerPage}\n        totalItemsCount={forks.length}\n        pageRangeDisplayed={5}\n        onChange={onPageChange}\n      />\n    </>\n  );\n};\nResultTable.propTypes = {\n  forks: PropTypes.arrayOf(ForkLine.propTypes.info).isRequired,\n  activePage: PropTypes.number.isRequired,\n  itemsCountPerPage: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n};\n\nexport default ResultTable;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal } from 'react-bootstrap';\n\nconst ErrorDialog = ({ detail, onClose }) => {\n  const [show, setShow] = useState(true);\n  const handleClose = () => {\n    setShow(false);\n    onClose();\n  };\n\n  // note animation is disabled to workaround an upstream issue:\n  // https://github.com/react-bootstrap/react-bootstrap/issues/5075\n  return (\n    <Modal show={show} onHide={handleClose} animation={false}>\n      <Modal.Header closeButton className=\"bg-warning\">\n        <Modal.Title>Error</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{detail}</Modal.Body>\n    </Modal>\n  );\n};\nErrorDialog.propTypes = {\n  detail: PropTypes.string.isRequired,\n  onClose: PropTypes.func,\n};\nErrorDialog.defaultProps = {\n  onClose: null,\n};\n\nexport default ErrorDialog;\n","import assert from 'assert';\nimport {\n  gql, ApolloClient, createHttpLink, InMemoryCache,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst endpoint = 'https://api.github.com/graphql';\n\nconst httpLink = createHttpLink({\n  uri: endpoint,\n});\n\n/**\n * Base64 to trick GitHub hooks so the token doesn't seem leaded in the commit.\n * Note this token will be accessible from the frontend hence should be very restricted.\n * Only the `public_repo` scope is required.\n */\nconst token = process.env.REACT_APP_GITHUB_PAT ? atob(process.env.REACT_APP_GITHUB_PAT) : null;\nassert( // eslint-disable-line no-console\n  token, 'REACT_APP_GITHUB_PAT environment variable must be set',\n);\n\nconst authLink = setContext((_, { headers }) => ({\n  headers: {\n    ...headers,\n    authorization: `Bearer ${token}`,\n  },\n}));\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nconst GET_FORKS_QUERY = gql`\n  query Forks($owner: String! $name: String!) {\n    repository(owner: $owner, name: $name) {\n      forks(first: 100, orderBy: {field: STARGAZERS, direction: DESC}) {\n        nodes {\n          nameWithOwner\n          stargazerCount\n          forkCount\n          object(expression: \"master\") {\n            ... on Commit {\n              committedDate\n              history {\n                totalCount\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport {\n  client,\n  GET_FORKS_QUERY,\n};\n","import { client, GET_FORKS_QUERY } from './graphql';\nimport { splitUrl } from './validators';\n\nconst searchPopularForks = (url, onResult, onError) => {\n  const [owner, name] = splitUrl(url);\n  client.query({\n    query: GET_FORKS_QUERY,\n    variables: { owner, name },\n  }).then(\n    (result) => onResult(result),\n  ).catch(\n    (error) => onError(error),\n  );\n};\n\nexport default searchPopularForks;\n","import React, { useState } from 'react';\nimport { Container as ReactContainer } from 'react-bootstrap';\nimport PopForm from './PopForm';\nimport ResultTable from './ResultTable';\nimport ErrorDialog from './ErrorDialog';\nimport searchPopularForks from '../utils/search';\n\nconst Container = () => {\n  const [forks, setForks] = useState();\n  const [errorDetail, setErrorDetail] = useState(null);\n  const [activePage, setActivePage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const onResult = (result) => {\n    setForks(result.data.repository.forks.nodes);\n    setErrorDetail(null);\n    setLoading(false);\n  };\n  const onError = (error) => {\n    setErrorDetail(error);\n    setLoading(false);\n  };\n  const errorDialog = errorDetail ? (\n    <ErrorDialog detail={errorDetail.message} />\n  ) : null;\n  const onSubmit = (url) => {\n    setLoading(true);\n    searchPopularForks(url, onResult, onError);\n  };\n  const resultTable = (\n    forks\n      ? (\n        <ResultTable\n          forks={forks}\n          activePage={activePage}\n          itemsCountPerPage={10}\n          onPageChange={setActivePage}\n        />\n      )\n      : null\n  );\n  return (\n    <ReactContainer>\n      {errorDialog}\n      <PopForm onSubmit={onSubmit} loading={loading} />\n      {resultTable}\n    </ReactContainer>\n  );\n};\n\nexport default Container;\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { version } from '../../package.json';\n\nconst Footer = () => (\n  <footer className=\"footer d-none d-md-block\">\n    <Container className=\"text-center\">\n      <span>\n        Copyright &copy; Andre Miras 2020 - gitpop3 v\n        {version}\n      </span>\n    </Container>\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\nimport { Container, Nav, Navbar } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Navigation = () => (\n  <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\" className=\"mb-4\">\n    <Container>\n      <Navbar.Brand href={process.env.PUBLIC_URL}>\n        <FontAwesomeIcon icon=\"code-branch\" />\n        {' '}\n        GitPop3\n      </Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href={process.env.PUBLIC_URL}>\n            <FontAwesomeIcon icon=\"home\" />\n            {' '}\n            Home\n          </Nav.Link>\n          <Nav.Link href=\"https://github.com/AndreMiras/gitpop3\">\n            <FontAwesomeIcon icon={['fab', 'github-alt']} />\n            {' '}\n            About\n          </Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Container>\n  </Navbar>\n);\n\nexport default Navigation;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport Container from './components/Container';\nimport Footer from './components/Footer';\nimport Navigation from './components/Navigation';\n\nlibrary.add(fab, fas);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation />\n      <Container />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}