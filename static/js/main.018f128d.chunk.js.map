{"version":3,"sources":["utils/validators.ts","components/PopForm.tsx","utils/time.ts","components/RepoLink.tsx","components/ForkLine.tsx","components/ResultTable.tsx","components/ErrorDialog.tsx","utils/graphql.ts","utils/search.ts","components/Container.tsx","components/Footer.tsx","components/Navigation.tsx","utils/sentry.ts","App.tsx","index.tsx"],"names":["repoRegex","urlMatch","url","match","SearchIcon","loading","icon","spin","PopForm","onSubmit","useState","setUrl","handleSubmit","e","preventDefault","stopPropagation","isInvalid","Form","InputGroup","className","FormControl","placeholder","onChange","target","value","Append","Button","type","variant","onClick","timeSince","date","seconds","Math","floor","Date","now","getTime","interval","RepoLink","nameWithOwner","href","ForkLine","info","stargazerCount","forkCount","defaultBranchRef","history","totalCount","committedDate","paginatedForks","forks","activePage","itemsCountPerPage","slice","SortIcon","direction","column","orderBy","HeaderModified","onHeaderClick","sortByCommittedDate","OverlayTrigger","transition","overlay","Tooltip","id","ResultTable","onPageChange","sortObjectsFunc","attribute","collection","order","lodashOrderBy","sortByNameWithOwner","x","toLowerCase","sortByStargazerCount","sortByForkCount","sortByCommits","parse","sortFunc","setOrderBy","toggledDirection","sortedForks","Table","striped","bordered","hover","map","fork","itemClass","linkClass","totalItemsCount","length","pageRangeDisplayed","ErrorDialog","detail","onClose","show","setShow","Modal","onHide","animation","Header","closeButton","Title","Body","endpoint","process","assert","ok","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","GET_FORKS_QUERY","gql","searchPopularForks","onResult","onError","splitUrl","owner","name","query","variables","then","result","data","repository","nodes","concatForksWithRepo","catch","error","Container","setForks","errorDetail","setErrorDetail","setActivePage","setLoading","errorDialog","message","resultTable","Footer","version","Navigation","Navbar","bg","expand","Brand","Toggle","Collapse","Nav","Link","Sentry","dsn","release","autoSessionTracking","integrations","Integrations","BrowserTracing","tracesSampleRate","setupSentry","library","add","fab","fas","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.018f128d.chunk.js","sourcesContent":["const repoRegex = /https?:\\/\\/github.com\\/([\\w-_.]+)\\/([\\w-_.]+)/;\n\nconst urlMatch = (url: string | null) => url?.match(repoRegex) || null;\n\n/**\n * Splits URL to owner and repo name.\n */\nconst splitUrl = (url: string | null) => urlMatch(url)?.slice(1, 3) || null;\n\nexport { urlMatch, splitUrl };\n","import React, { FormEvent, FunctionComponent, useState } from \"react\";\nimport { Button, Form, FormControl, InputGroup } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { urlMatch } from \"../utils/validators\";\n\ntype SearchIconProps = {\n  loading: boolean;\n};\n\nconst SearchIcon: FunctionComponent<SearchIconProps> = ({ loading }) => (\n  <FontAwesomeIcon icon={loading ? \"spinner\" : \"search\"} spin={loading} />\n);\n\ntype PopFormProps = {\n  onSubmit: (url: string) => void;\n  loading: boolean;\n};\n\nconst PopForm: FunctionComponent<PopFormProps> = ({ onSubmit, loading }) => {\n  const [url, setUrl] = useState(\"\");\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    if (urlMatch(url) === null) {\n      e.stopPropagation();\n    } else {\n      onSubmit(url);\n    }\n  };\n  const isInvalid = url !== \"\" && urlMatch(url) === null;\n  return (\n    <Form onSubmit={handleSubmit}>\n      <InputGroup className=\"mb-3\">\n        <FormControl\n          placeholder=\"https://github.com/django/django\"\n          onChange={(e) => setUrl(e.target.value)}\n          isInvalid={isInvalid}\n        />\n        <InputGroup.Append>\n          <Button\n            type=\"submit\"\n            variant=\"outline-secondary\"\n            onClick={handleSubmit}\n          >\n            <SearchIcon loading={loading} />\n          </Button>\n        </InputGroup.Append>\n      </InputGroup>\n    </Form>\n  );\n};\n\nexport default PopForm;\n","/**\n * https://stackoverflow.com/a/3177838\n */\nconst timeSince = (date: Date) => {\n  const seconds = Math.floor((Date.now() - date.getTime()) / 1000);\n  let interval = seconds / 31536000;\n  if (interval > 1) {\n    return `${Math.floor(interval)} years ago`;\n  }\n  interval = seconds / 2592000;\n  if (interval > 1) {\n    return `${Math.floor(interval)} months ago`;\n  }\n  interval = seconds / 86400;\n  if (interval > 1) {\n    return `${Math.floor(interval)} days ago`;\n  }\n  interval = seconds / 3600;\n  if (interval > 1) {\n    return `${Math.floor(interval)} hours ago`;\n  }\n  interval = seconds / 60;\n  if (interval > 1) {\n    return `${Math.floor(interval)} minutes ago`;\n  }\n  return `${Math.floor(seconds)} seconds ago`;\n};\n\nexport default timeSince;\n","import { FunctionComponent } from \"react\";\n\ntype RepoLinkProps = {\n  nameWithOwner: string;\n};\n\nconst RepoLink: FunctionComponent<RepoLinkProps> = ({ nameWithOwner }) => (\n  <a href={`https://github.com/${nameWithOwner}`}>{nameWithOwner}</a>\n);\n\nexport default RepoLink;\n","import { FunctionComponent } from \"react\";\nimport { Node } from \"../utils/types\";\nimport timeSince from \"../utils/time\";\nimport RepoLink from \"./RepoLink\";\n\ntype ForkLineProps = {\n  info: Node;\n};\n\nconst ForkLine: FunctionComponent<ForkLineProps> = ({ info }) => (\n  <tr>\n    <td>\n      <RepoLink nameWithOwner={info.nameWithOwner} />\n    </td>\n    <td>{info.stargazerCount}</td>\n    <td>{info.forkCount}</td>\n    <td>{info.defaultBranchRef.target.history.totalCount}</td>\n    <td>{timeSince(new Date(info.defaultBranchRef.target.committedDate))}</td>\n  </tr>\n);\n\nexport default ForkLine;\n","import { FunctionComponent, useState } from \"react\";\nimport { orderBy as lodashOrderBy } from \"lodash\";\nimport { OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Pagination from \"react-js-pagination\";\nimport { Node } from \"../utils/types\";\nimport ForkLine from \"./ForkLine\";\n\ntype Direction = \"desc\" | \"asc\";\n\ntype SortFunc = (collection: any, order: Direction) => any;\n\nconst paginatedForks = (\n  forks: Node[],\n  activePage: number,\n  itemsCountPerPage: number\n) =>\n  forks.slice(\n    (activePage - 1) * itemsCountPerPage,\n    activePage * itemsCountPerPage\n  );\n\nconst sortIconDirection = (direction: Direction) =>\n  direction === \"asc\" ? \"sort-down\" : \"sort-up\";\n\ntype SortIconProps = {\n  column: string;\n  orderBy: {\n    column: string;\n    direction: Direction;\n  };\n};\n\nconst SortIcon: FunctionComponent<SortIconProps> = ({ column, orderBy }) => (\n  <FontAwesomeIcon\n    icon={\n      orderBy.column === column ? sortIconDirection(orderBy.direction) : \"sort\"\n    }\n  />\n);\n\ntype HeaderModifiedProps = {\n  onHeaderClick: (column: string, sortFunc: SortFunc) => void;\n  // TODO\n  sortByCommittedDate: SortFunc;\n  orderBy: {\n    column: string;\n    direction: Direction;\n  };\n};\n\nconst HeaderModified: FunctionComponent<HeaderModifiedProps> = ({\n  onHeaderClick,\n  sortByCommittedDate,\n  orderBy,\n}) => (\n  <OverlayTrigger\n    transition={false}\n    overlay={\n      <Tooltip id=\"last-commit-tooltip\">\n        Last commit on the default branch.\n      </Tooltip>\n    }\n  >\n    <th onClick={() => onHeaderClick(\"committedDate\", sortByCommittedDate)}>\n      <FontAwesomeIcon icon=\"calendar-alt\" /> Modified{\" \"}\n      <SortIcon column=\"committedDate\" orderBy={orderBy} />\n    </th>\n  </OverlayTrigger>\n);\n\ntype ResultTableProps = {\n  forks: Node[];\n  activePage: number;\n  itemsCountPerPage: number;\n  onPageChange: (pageNumber: number) => void;\n};\n\nconst ResultTable: FunctionComponent<ResultTableProps> = ({\n  forks,\n  activePage,\n  itemsCountPerPage,\n  onPageChange,\n}) => {\n  const sortObjectsFunc =\n    (attribute: (attribute: any) => any) =>\n    (collection: any[], order: Direction) =>\n      lodashOrderBy(collection, [attribute], [order]);\n  const sortByNameWithOwner = sortObjectsFunc((x) =>\n    x.nameWithOwner.toLowerCase()\n  );\n  const sortByStargazerCount = sortObjectsFunc((x) => x.stargazerCount);\n  const sortByForkCount = sortObjectsFunc((x) => x.forkCount);\n  const sortByCommits = sortObjectsFunc(\n    (x) => x.defaultBranchRef.target.history.totalCount\n  );\n  const sortByCommittedDate = sortObjectsFunc((x) =>\n    Date.parse(x.defaultBranchRef.target.committedDate)\n  );\n  const [orderBy, setOrderBy] = useState<{\n    column: string;\n    direction: Direction;\n    sortFunc: SortFunc;\n  }>({\n    column: \"stargazerCount\",\n    direction: \"desc\",\n    sortFunc: sortByStargazerCount,\n  });\n  const onHeaderClick = (column: string, sortFunc: SortFunc) => {\n    // change direction only if the same order was selected\n    const toggledDirection = orderBy.direction === \"desc\" ? \"asc\" : \"desc\";\n    const direction =\n      column === orderBy.column ? toggledDirection : orderBy.direction;\n    setOrderBy({ column, direction, sortFunc });\n  };\n  const sortedForks = orderBy.sortFunc(forks.slice(), orderBy.direction);\n  return (\n    <>\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th\n              onClick={() =>\n                onHeaderClick(\"nameWithOwner\", sortByNameWithOwner)\n              }\n            >\n              <FontAwesomeIcon icon={[\"fab\", \"github-alt\"]} /> Repo{\" \"}\n              <SortIcon column=\"nameWithOwner\" orderBy={orderBy} />\n            </th>\n            <th\n              onClick={() =>\n                onHeaderClick(\"stargazerCount\", sortByStargazerCount)\n              }\n            >\n              <FontAwesomeIcon icon=\"star\" /> Stars{\" \"}\n              <SortIcon column=\"stargazerCount\" orderBy={orderBy} />\n            </th>\n            <th onClick={() => onHeaderClick(\"forkCount\", sortByForkCount)}>\n              <FontAwesomeIcon icon=\"code-branch\" /> Forks{\" \"}\n              <SortIcon column=\"forkCount\" orderBy={orderBy} />\n            </th>\n            <th onClick={() => onHeaderClick(\"commits\", sortByCommits)}>\n              <FontAwesomeIcon icon=\"dot-circle\" /> Commits{\" \"}\n              <SortIcon column=\"commits\" orderBy={orderBy} />\n            </th>\n            <HeaderModified\n              onHeaderClick={onHeaderClick}\n              sortByCommittedDate={sortByCommittedDate}\n              orderBy={orderBy}\n            />\n          </tr>\n        </thead>\n        <tbody>\n          {paginatedForks(sortedForks, activePage, itemsCountPerPage).map(\n            (fork) => (\n              <ForkLine key={fork.nameWithOwner} info={fork} />\n            )\n          )}\n        </tbody>\n      </Table>\n      <Pagination\n        itemClass=\"page-item\"\n        linkClass=\"page-link\"\n        activePage={activePage}\n        itemsCountPerPage={itemsCountPerPage}\n        totalItemsCount={forks.length}\n        pageRangeDisplayed={5}\n        onChange={onPageChange}\n      />\n    </>\n  );\n};\n\nexport default ResultTable;\n","import { FunctionComponent, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\n\ntype ErrorDialogProps = {\n  detail: string;\n  onClose?: () => void;\n};\n\nconst ErrorDialog: FunctionComponent<ErrorDialogProps> = ({\n  detail,\n  onClose,\n}) => {\n  const [show, setShow] = useState(true);\n  const handleClose = () => {\n    setShow(false);\n    onClose && onClose();\n  };\n\n  // note animation is disabled to workaround an upstream issue:\n  // https://github.com/react-bootstrap/react-bootstrap/issues/5075\n  return (\n    <Modal show={show} onHide={handleClose} animation={false}>\n      <Modal.Header closeButton className=\"bg-warning\">\n        <Modal.Title>Error</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{detail}</Modal.Body>\n    </Modal>\n  );\n};\n\nexport default ErrorDialog;\n","import assert from \"assert\";\nimport {\n  gql,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n} from \"@apollo/client\";\n\nconst endpoint = process.env.REACT_APP_GRAPHQL_ENDPOINT;\nassert.ok(\n  endpoint,\n  \"REACT_APP_GRAPHQL_ENDPOINT environment variable must be set\"\n);\n\nconst httpLink = createHttpLink({\n  uri: endpoint,\n});\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache(),\n});\n\nconst GET_FORKS_QUERY = gql`\n  fragment RepositoryFields on Repository {\n    nameWithOwner\n    stargazerCount\n    forkCount\n    defaultBranchRef {\n      target {\n        ... on Commit {\n          committedDate\n          history {\n            totalCount\n          }\n        }\n      }\n    }\n  }\n\n  query forks($owner: String!, $name: String!) {\n    repository(owner: $owner, name: $name) {\n      ...RepositoryFields\n      forks(first: 100, orderBy: { field: STARGAZERS, direction: DESC }) {\n        nodes {\n          ...RepositoryFields\n        }\n      }\n    }\n  }\n`;\n\nexport { client, GET_FORKS_QUERY };\n","import { ApolloError } from \"@apollo/client\";\nimport { client, GET_FORKS_QUERY } from \"./graphql\";\nimport { splitUrl } from \"./validators\";\nimport { Node, Result } from \"./types\";\n\nconst concatForksWithRepo = (result: Result) => {\n  const { forks, ...origin } = result.data.repository;\n  return [...[origin], ...forks.nodes];\n};\n\nconst searchPopularForks = (\n  url: string,\n  onResult: (result: Node[]) => void,\n  onError: (error: ApolloError) => void\n) => {\n  const [owner, name] = splitUrl(url) || [null, null];\n  client\n    .query({\n      query: GET_FORKS_QUERY,\n      variables: { owner, name },\n    })\n    .then((result) => onResult(concatForksWithRepo(result)))\n    .catch((error) => onError(error));\n};\n\nexport { searchPopularForks };\n","import { FunctionComponent, useState } from \"react\";\nimport { Container as ReactContainer } from \"react-bootstrap\";\nimport PopForm from \"./PopForm\";\nimport ResultTable from \"./ResultTable\";\nimport ErrorDialog from \"./ErrorDialog\";\nimport { searchPopularForks } from \"../utils/search\";\nimport { Node } from \"../utils/types\";\n\nconst Container: FunctionComponent = () => {\n  const [forks, setForks] = useState<Node[]>();\n  const [errorDetail, setErrorDetail] = useState<Error | null>(null);\n  const [activePage, setActivePage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const onResult = (nodes: Node[]) => {\n    setForks(nodes);\n    setErrorDetail(null);\n    setLoading(false);\n  };\n  const onError = (error: Error) => {\n    setErrorDetail(error);\n    setLoading(false);\n  };\n  const errorDialog = errorDetail ? (\n    <ErrorDialog detail={errorDetail.message} />\n  ) : null;\n  const onSubmit = (url: string) => {\n    setLoading(true);\n    searchPopularForks(url, onResult, onError);\n  };\n  const resultTable = forks ? (\n    <ResultTable\n      forks={forks}\n      activePage={activePage}\n      itemsCountPerPage={10}\n      onPageChange={setActivePage}\n    />\n  ) : null;\n  return (\n    <ReactContainer>\n      {errorDialog}\n      <PopForm onSubmit={onSubmit} loading={loading} />\n      {resultTable}\n    </ReactContainer>\n  );\n};\n\nexport default Container;\n","import { FunctionComponent } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { version } from \"../../package.json\";\n\nconst Footer: FunctionComponent = () => (\n  <footer className=\"footer d-none d-md-block\">\n    <Container className=\"text-center\">\n      <span>Copyright &copy; Andre Miras 2020 - gitpop3 v{version}</span>\n    </Container>\n  </footer>\n);\n\nexport default Footer;\n","import { FunctionComponent } from \"react\";\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst Navigation: FunctionComponent = () => (\n  <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\" className=\"mb-4\">\n    <Container>\n      <Navbar.Brand href={process.env.PUBLIC_URL}>\n        <FontAwesomeIcon icon=\"code-branch\" /> GitPop3\n      </Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href={process.env.PUBLIC_URL}>\n            <FontAwesomeIcon icon=\"home\" /> Home\n          </Nav.Link>\n          <Nav.Link href=\"https://github.com/AndreMiras/gitpop3\">\n            <FontAwesomeIcon icon={[\"fab\", \"github-alt\"]} /> About\n          </Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Container>\n  </Navbar>\n);\n\nexport default Navigation;\n","import * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\nimport { version } from \"../../package.json\";\n\nconst setupSentry = (): boolean => {\n  if (process.env.NODE_ENV !== \"production\") {\n    return false;\n  }\n  Sentry.init({\n    dsn: process.env.REACT_APP_SENTRY_DSN,\n    release: version,\n    autoSessionTracking: true,\n    integrations: [new Integrations.BrowserTracing()],\n    tracesSampleRate: 1.0,\n  });\n  return true;\n};\n\nexport default setupSentry;\n","import { FunctionComponent } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nimport Container from \"./components/Container\";\nimport Footer from \"./components/Footer\";\nimport Navigation from \"./components/Navigation\";\nimport setupSentry from \"./utils/sentry\";\n\nsetupSentry();\nlibrary.add(fab, fas);\n\nconst App: FunctionComponent = () => (\n  <div className=\"App\">\n    <Navigation />\n    <Container />\n    <Footer />\n  </div>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}