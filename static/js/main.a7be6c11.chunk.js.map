{"version":3,"sources":["utils/validators.js","components/PopForm.jsx","utils/time.ts","components/RepoLink.jsx","components/ForkLine.jsx","utils/sort.js","components/ResultTable.jsx","components/ErrorDialog.jsx","utils/graphql.js","utils/search.js","components/Container.jsx","components/Footer.jsx","components/Navigation.jsx","utils/sentry.ts","App.jsx","index.jsx"],"names":["repoRegex","urlMatch","url","match","SearchIcon","loading","icon","spin","PopForm","onSubmit","useState","setUrl","handleSubmit","e","preventDefault","stopPropagation","isInvalid","Form","InputGroup","className","FormControl","placeholder","onChange","target","value","Append","Button","type","variant","onClick","timeSince","date","seconds","Math","floor","Date","now","getTime","interval","RepoLink","nameWithOwner","href","ForkLine","info","stargazerCount","forkCount","object","history","totalCount","committedDate","sortByAnything","attribute","a","b","sortByNumber","toLowerCase","localeCompare","sortByString","sortObjectsFunc","paginatedForks","forks","activePage","itemsCountPerPage","slice","SortIcon","direction","column","orderBy","HeaderModified","onHeaderClick","sortByCommittedDate","OverlayTrigger","transition","overlay","Tooltip","ResultTable","onPageChange","sortByNameWithOwner","x","sortByStargazerCount","sortByForkCount","sortByCommits","parse","sortFunc","setOrderBy","toggledDirection","sortedForks","directionFunc","sort","Table","striped","bordered","hover","map","fork","itemClass","linkClass","totalItemsCount","length","pageRangeDisplayed","ErrorDialog","detail","onClose","show","setShow","Modal","onHide","animation","Header","closeButton","Title","Body","defaultProps","httpLink","createHttpLink","uri","token","atob","process","assert","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","GET_FORKS_QUERY","gql","searchPopularForks","onResult","onError","splitUrl","owner","name","query","variables","then","result","data","repository","nodes","concatForksWithRepo","catch","error","Container","setForks","errorDetail","setErrorDetail","setActivePage","setLoading","errorDialog","message","resultTable","Footer","version","Navigation","Navbar","bg","expand","Brand","Toggle","Collapse","Nav","Link","Sentry","dsn","release","autoSessionTracking","integrations","Integrations","BrowserTracing","tracesSampleRate","setupSentry","library","add","fab","fas","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7be6c11.chunk.js","sourcesContent":["const repoRegex = /https?:\\/\\/github.com\\/([\\w-_.]+)\\/([\\w-_.]+)/;\n\nconst urlMatch = (url) => (url && url.match(repoRegex)) || null;\n\n/**\n * Splits URL to owner and repo name.\n */\nconst splitUrl = (url) => urlMatch(url) && urlMatch(url).slice(1, 3);\n\nexport { urlMatch, splitUrl };\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Form, FormControl, InputGroup } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { urlMatch } from \"../utils/validators\";\n\nconst SearchIcon = ({ loading }) => (\n  <FontAwesomeIcon icon={loading ? \"spinner\" : \"search\"} spin={loading} />\n);\nSearchIcon.propTypes = {\n  loading: PropTypes.bool.isRequired,\n};\n\nconst PopForm = ({ onSubmit, loading }) => {\n  const [url, setUrl] = useState();\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (urlMatch(url) === null) {\n      e.stopPropagation();\n    } else {\n      onSubmit(url);\n    }\n  };\n  const isInvalid = url && urlMatch(url) === null;\n  return (\n    <Form onSubmit={handleSubmit}>\n      <InputGroup className=\"mb-3\">\n        <FormControl\n          placeholder=\"https://github.com/django/django\"\n          onChange={(e) => setUrl(e.target.value)}\n          isInvalid={isInvalid}\n        />\n        <InputGroup.Append>\n          <Button\n            type=\"submit\"\n            variant=\"outline-secondary\"\n            onClick={handleSubmit}\n          >\n            <SearchIcon loading={loading} />\n          </Button>\n        </InputGroup.Append>\n      </InputGroup>\n    </Form>\n  );\n};\nPopForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n};\n\nexport default PopForm;\n","/**\n * https://stackoverflow.com/a/3177838\n */\nconst timeSince = (date: Date) => {\n  const seconds = Math.floor((Date.now() - date.getTime()) / 1000);\n  let interval = seconds / 31536000;\n  if (interval > 1) {\n    return `${Math.floor(interval)} years ago`;\n  }\n  interval = seconds / 2592000;\n  if (interval > 1) {\n    return `${Math.floor(interval)} months ago`;\n  }\n  interval = seconds / 86400;\n  if (interval > 1) {\n    return `${Math.floor(interval)} days ago`;\n  }\n  interval = seconds / 3600;\n  if (interval > 1) {\n    return `${Math.floor(interval)} hours ago`;\n  }\n  interval = seconds / 60;\n  if (interval > 1) {\n    return `${Math.floor(interval)} minutes ago`;\n  }\n  return `${Math.floor(seconds)} seconds ago`;\n};\n\nexport default timeSince;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst RepoLink = ({ nameWithOwner }) => (\n  <a href={`https://github.com/${nameWithOwner}`}>{nameWithOwner}</a>\n);\nRepoLink.propTypes = {\n  nameWithOwner: PropTypes.string.isRequired,\n};\n\nexport default RepoLink;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport timeSince from \"../utils/time\";\nimport RepoLink from \"./RepoLink\";\n\nconst ForkLine = ({ info }) => (\n  <tr>\n    <td>\n      <RepoLink nameWithOwner={info.nameWithOwner} />\n    </td>\n    <td>{info.stargazerCount}</td>\n    <td>{info.forkCount}</td>\n    <td>{info.object.history.totalCount}</td>\n    <td>{timeSince(new Date(info.object.committedDate))}</td>\n  </tr>\n);\nForkLine.propTypes = {\n  info: PropTypes.shape({\n    nameWithOwner: PropTypes.string.isRequired,\n    stargazerCount: PropTypes.number.isRequired,\n    forkCount: PropTypes.number.isRequired,\n    object: PropTypes.shape({\n      committedDate: PropTypes.string.isRequired,\n      history: PropTypes.shape({\n        totalCount: PropTypes.number.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default ForkLine;\n","const sortByString = (attribute) => (a, b) =>\n  attribute(a).toLowerCase().localeCompare(attribute(b).toLowerCase());\nconst sortByNumber = (attribute) => (a, b) => attribute(a) - attribute(b);\nconst sortByAnything = (attribute) => (a, b) =>\n  typeof attribute(a) === \"number\"\n    ? sortByNumber(attribute)(a, b)\n    : sortByString(attribute)(a, b);\nconst sortObjectsFunc = sortByAnything;\n\n/**\n * Sorts object by given attribute.\n */\nconst sortObjects = (objects, attribute, reverse = false) =>\n  objects\n    .slice()\n    .sort(sortByAnything(attribute))\n    [reverse ? \"reverse\" : \"slice\"]();\n\nexport { sortObjects, sortObjectsFunc };\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Pagination from \"react-js-pagination\";\nimport ForkLine from \"./ForkLine\";\nimport { sortObjectsFunc } from \"../utils/sort\";\n\nconst paginatedForks = (forks, activePage, itemsCountPerPage) =>\n  forks.slice(\n    (activePage - 1) * itemsCountPerPage,\n    activePage * itemsCountPerPage\n  );\n\nconst sortIconDirection = (direction) =>\n  direction === \"asc\" ? \"sort-down\" : \"sort-up\";\n\nconst SortIcon = ({ column, orderBy }) => (\n  <FontAwesomeIcon\n    icon={\n      orderBy.column === column ? sortIconDirection(orderBy.direction) : \"sort\"\n    }\n  />\n);\nSortIcon.propTypes = {\n  column: PropTypes.string.isRequired,\n  orderBy: PropTypes.shape({\n    column: PropTypes.string.isRequired,\n    direction: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nconst HeaderModified = ({ onHeaderClick, sortByCommittedDate, orderBy }) => (\n  <OverlayTrigger\n    transition={false}\n    overlay={<Tooltip>Last commit on master.</Tooltip>}\n  >\n    <th onClick={() => onHeaderClick(\"committedDate\", sortByCommittedDate)}>\n      <FontAwesomeIcon icon=\"calendar-alt\" /> Modified{\" \"}\n      <SortIcon column=\"committedDate\" orderBy={orderBy} />\n    </th>\n  </OverlayTrigger>\n);\nHeaderModified.propTypes = {\n  onHeaderClick: PropTypes.func.isRequired,\n  sortByCommittedDate: PropTypes.func.isRequired,\n  orderBy: PropTypes.shape({\n    column: PropTypes.string.isRequired,\n    direction: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nconst ResultTable = ({\n  forks,\n  activePage,\n  itemsCountPerPage,\n  onPageChange,\n}) => {\n  const sortByNameWithOwner = sortObjectsFunc((x) => x.nameWithOwner);\n  const sortByStargazerCount = sortObjectsFunc((x) => x.stargazerCount);\n  const sortByForkCount = sortObjectsFunc((x) => x.forkCount);\n  const sortByCommits = sortObjectsFunc((x) => x.object.history.totalCount);\n  const sortByCommittedDate = sortObjectsFunc((x) =>\n    Date.parse(x.object.committedDate)\n  );\n  const [orderBy, setOrderBy] = useState({\n    column: \"stargazerCount\",\n    direction: \"desc\",\n    sortFunc: sortByStargazerCount,\n  });\n  const sort = (direction, sortFunc) => {\n    const directionFunc = direction === \"asc\" ? \"slice\" : \"reverse\";\n    return forks.slice().sort(sortFunc)[directionFunc]();\n  };\n  const onHeaderClick = (column, sortFunc) => {\n    // change direction only if the same order was selected\n    const toggledDirection = orderBy.direction === \"desc\" ? \"asc\" : \"desc\";\n    const direction =\n      column === orderBy.column ? toggledDirection : orderBy.direction;\n    setOrderBy({ column, direction, sortFunc });\n  };\n  const sortedForks = sort(orderBy.direction, orderBy.sortFunc);\n  return (\n    <>\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th\n              onClick={() =>\n                onHeaderClick(\"nameWithOwner\", sortByNameWithOwner)\n              }\n            >\n              <FontAwesomeIcon icon={[\"fab\", \"github-alt\"]} /> Repo{\" \"}\n              <SortIcon column=\"nameWithOwner\" orderBy={orderBy} />\n            </th>\n            <th\n              onClick={() =>\n                onHeaderClick(\"stargazerCount\", sortByStargazerCount)\n              }\n            >\n              <FontAwesomeIcon icon=\"star\" /> Stars{\" \"}\n              <SortIcon column=\"stargazerCount\" orderBy={orderBy} />\n            </th>\n            <th onClick={() => onHeaderClick(\"forkCount\", sortByForkCount)}>\n              <FontAwesomeIcon icon=\"code-branch\" /> Forks{\" \"}\n              <SortIcon column=\"forkCount\" orderBy={orderBy} />\n            </th>\n            <th onClick={() => onHeaderClick(\"commits\", sortByCommits)}>\n              <FontAwesomeIcon icon=\"dot-circle\" /> Commits{\" \"}\n              <SortIcon column=\"commits\" orderBy={orderBy} />\n            </th>\n            <HeaderModified\n              onHeaderClick={onHeaderClick}\n              sortByCommittedDate={sortByCommittedDate}\n              orderBy={orderBy}\n            />\n          </tr>\n        </thead>\n        <tbody>\n          {paginatedForks(sortedForks, activePage, itemsCountPerPage).map(\n            (fork) => (\n              <ForkLine key={fork.nameWithOwner} info={fork} />\n            )\n          )}\n        </tbody>\n      </Table>\n      <Pagination\n        itemClass=\"page-item\"\n        linkClass=\"page-link\"\n        activePage={activePage}\n        itemsCountPerPage={itemsCountPerPage}\n        totalItemsCount={forks.length}\n        pageRangeDisplayed={5}\n        onChange={onPageChange}\n      />\n    </>\n  );\n};\nResultTable.propTypes = {\n  forks: PropTypes.arrayOf(ForkLine.propTypes.info).isRequired,\n  activePage: PropTypes.number.isRequired,\n  itemsCountPerPage: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n};\n\nexport default ResultTable;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Modal } from \"react-bootstrap\";\n\nconst ErrorDialog = ({ detail, onClose }) => {\n  const [show, setShow] = useState(true);\n  const handleClose = () => {\n    setShow(false);\n    onClose();\n  };\n\n  // note animation is disabled to workaround an upstream issue:\n  // https://github.com/react-bootstrap/react-bootstrap/issues/5075\n  return (\n    <Modal show={show} onHide={handleClose} animation={false}>\n      <Modal.Header closeButton className=\"bg-warning\">\n        <Modal.Title>Error</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{detail}</Modal.Body>\n    </Modal>\n  );\n};\nErrorDialog.propTypes = {\n  detail: PropTypes.string.isRequired,\n  onClose: PropTypes.func,\n};\nErrorDialog.defaultProps = {\n  onClose: null,\n};\n\nexport default ErrorDialog;\n","import assert from \"assert\";\nimport {\n  gql,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nconst endpoint = \"https://api.github.com/graphql\";\n\nconst httpLink = createHttpLink({\n  uri: endpoint,\n});\n\n/**\n * Base64 to trick GitHub hooks so the token doesn't seem leaked in the commit.\n * Note this token will be accessible from the frontend hence should be very restricted.\n * Only the `public_repo` scope is required.\n */\nconst token = process.env.REACT_APP_GITHUB_PAT\n  ? atob(process.env.REACT_APP_GITHUB_PAT)\n  : null;\nassert(\n  // eslint-disable-line no-console\n  token,\n  \"REACT_APP_GITHUB_PAT environment variable must be set\"\n);\n\nconst authLink = setContext((_, { headers }) => ({\n  headers: {\n    ...headers,\n    authorization: `Bearer ${token}`,\n  },\n}));\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nconst GET_FORKS_QUERY = gql`\n  query Forks($owner: String!, $name: String!) {\n    repository(owner: $owner, name: $name) {\n      nameWithOwner\n      stargazerCount\n      forkCount\n      object(expression: \"master\") {\n        ... on Commit {\n          committedDate\n          history {\n            totalCount\n          }\n        }\n      }\n      forks(first: 100, orderBy: { field: STARGAZERS, direction: DESC }) {\n        nodes {\n          nameWithOwner\n          stargazerCount\n          forkCount\n          object(expression: \"master\") {\n            ... on Commit {\n              committedDate\n              history {\n                totalCount\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport { client, GET_FORKS_QUERY };\n","import { client, GET_FORKS_QUERY } from \"./graphql\";\nimport { splitUrl } from \"./validators\";\n\nconst concatForksWithRepo = (result) => {\n  const { forks, ...origin } = result.data.repository;\n  return [...[origin], ...forks.nodes];\n};\n\nconst searchPopularForks = (url, onResult, onError) => {\n  const [owner, name] = splitUrl(url);\n  client\n    .query({\n      query: GET_FORKS_QUERY,\n      variables: { owner, name },\n    })\n    .then((result) => onResult(concatForksWithRepo(result)))\n    .catch((error) => onError(error));\n};\n\nexport default searchPopularForks;\n","import React, { useState } from \"react\";\nimport { Container as ReactContainer } from \"react-bootstrap\";\nimport PopForm from \"./PopForm\";\nimport ResultTable from \"./ResultTable\";\nimport ErrorDialog from \"./ErrorDialog\";\nimport searchPopularForks from \"../utils/search\";\n\nconst Container = () => {\n  const [forks, setForks] = useState();\n  const [errorDetail, setErrorDetail] = useState(null);\n  const [activePage, setActivePage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const onResult = (nodes) => {\n    setForks(nodes);\n    setErrorDetail(null);\n    setLoading(false);\n  };\n  const onError = (error) => {\n    setErrorDetail(error);\n    setLoading(false);\n  };\n  const errorDialog = errorDetail ? (\n    <ErrorDialog detail={errorDetail.message} />\n  ) : null;\n  const onSubmit = (url) => {\n    setLoading(true);\n    searchPopularForks(url, onResult, onError);\n  };\n  const resultTable = forks ? (\n    <ResultTable\n      forks={forks}\n      activePage={activePage}\n      itemsCountPerPage={10}\n      onPageChange={setActivePage}\n    />\n  ) : null;\n  return (\n    <ReactContainer>\n      {errorDialog}\n      <PopForm onSubmit={onSubmit} loading={loading} />\n      {resultTable}\n    </ReactContainer>\n  );\n};\n\nexport default Container;\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { version } from \"../../package.json\";\n\nconst Footer = () => (\n  <footer className=\"footer d-none d-md-block\">\n    <Container className=\"text-center\">\n      <span>Copyright &copy; Andre Miras 2020 - gitpop3 v{version}</span>\n    </Container>\n  </footer>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst Navigation = () => (\n  <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\" className=\"mb-4\">\n    <Container>\n      <Navbar.Brand href={process.env.PUBLIC_URL}>\n        <FontAwesomeIcon icon=\"code-branch\" /> GitPop3\n      </Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href={process.env.PUBLIC_URL}>\n            <FontAwesomeIcon icon=\"home\" /> Home\n          </Nav.Link>\n          <Nav.Link href=\"https://github.com/AndreMiras/gitpop3\">\n            <FontAwesomeIcon icon={[\"fab\", \"github-alt\"]} /> About\n          </Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Container>\n  </Navbar>\n);\n\nexport default Navigation;\n","import * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\nimport { version } from \"../../package.json\";\n\nconst setupSentry = (): boolean => {\n  if (process.env.NODE_ENV !== \"production\") {\n    return false;\n  }\n  Sentry.init({\n    dsn: process.env.REACT_APP_SENTRY_DSN,\n    release: version,\n    autoSessionTracking: true,\n    integrations: [new Integrations.BrowserTracing()],\n    tracesSampleRate: 1.0,\n  });\n  return true;\n};\n\nexport default setupSentry;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nimport Container from \"./components/Container\";\nimport Footer from \"./components/Footer\";\nimport Navigation from \"./components/Navigation\";\nimport setupSentry from \"./utils/sentry\";\n\nsetupSentry();\nlibrary.add(fab, fas);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation />\n      <Container />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}