{"version":3,"sources":["utils/validators.js","components/PopForm.jsx","components/ResultTable.jsx","utils/graphql.js","components/Container.jsx","components/Footer.jsx","components/Navigation.jsx","App.jsx","index.jsx"],"names":["repoRegex","urlMatch","url","match","PopForm","onSubmit","useState","setUrl","handleSubmit","e","preventDefault","stopPropagation","Form","InputGroup","className","FormControl","placeholder","onChange","target","value","isInvalid","Append","Button","type","variant","onClick","icon","timeSince","date","seconds","Math","floor","Date","interval","Fork","info","nameWithOwner","stargazerCount","forkCount","parse","pushedAt","ResultTable","forks","Table","striped","bordered","hover","map","fork","httpLink","createHttpLink","uri","token","atob","process","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","GET_FORKS_QUERY","gql","searchPopularForks","onResult","slice","splitUrl","owner","name","query","variables","then","result","Container","setForks","data","repository","nodes","resultTable","Footer","version","Navigation","Navbar","bg","expand","Brand","href","Toggle","Collapse","Nav","Link","library","add","fab","fas","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAAMA,EAAY,sCAKHC,EAJE,SAACC,GAAD,OACfA,GAAOA,EAAIC,MAAMH,ICqCJI,EA/BC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACVC,qBADU,mBACzBJ,EADyB,KACpBK,EADoB,KAE1BC,EAAe,SAACC,GACpBA,EAAEC,iBACoB,OAAlBT,EAASC,GACXO,EAAEE,kBAEFN,EAASH,IAGb,OACE,cAACU,EAAA,EAAD,CAAMP,SAAUG,EAAhB,SACE,eAACK,EAAA,EAAD,CAAYC,UAAU,OAAtB,UACE,cAACC,EAAA,EAAD,CACEC,YAAY,mCACZC,SAAU,SAACR,GAAD,OAAOF,EAAOE,EAAES,OAAOC,QACjCC,UAA6B,OAAlBnB,EAASC,KAEtB,cAACW,EAAA,EAAWQ,OAAZ,UACE,cAACC,EAAA,EAAD,CAAQC,KAAK,SAASC,QAAQ,oBAAoBC,QAASjB,EAA3D,SACE,cAAC,IAAD,CAAiBkB,KAAK,qB,SCpB5BC,EAAY,SAACC,GACjB,IAAMC,EAAUC,KAAKC,OAAO,IAAIC,KAASJ,GAAQ,KAC7CK,EAAWJ,EAAU,QACzB,OAAII,EAAW,EACP,GAAN,OAAUH,KAAKC,MAAME,GAArB,eAEFA,EAAWJ,EAAU,QACN,EACP,GAAN,OAAUC,KAAKC,MAAME,GAArB,gBAEFA,EAAWJ,EAAU,OACN,EACP,GAAN,OAAUC,KAAKC,MAAME,GAArB,cAEFA,EAAWJ,EAAU,MACN,EACP,GAAN,OAAUC,KAAKC,MAAME,GAArB,eAEFA,EAAWJ,EAAU,IACN,EACP,GAAN,OAAUC,KAAKC,MAAME,GAArB,gBAEI,GAAN,OAAUH,KAAKC,MAAMF,GAArB,iBAGIK,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACX,+BACE,6BAAKA,EAAKC,gBACV,6BAAKD,EAAKE,iBACV,6BAAKF,EAAKG,YACV,6BAAKX,EAAUK,KAAKO,MAAMJ,EAAKK,iBAiDpBC,EArCK,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAClB,mCACE,eAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACE,gCACE,+BACE,+BACE,cAAC,IAAD,CAAiBpB,KAAM,CAAC,MAAO,gBAC9B,IAFH,UAKA,+BACE,cAAC,IAAD,CAAiBA,KAAK,SACrB,IAFH,WAKA,+BACE,cAAC,IAAD,CAAiBA,KAAK,gBACrB,IAFH,WAKA,+BACE,cAAC,IAAD,CAAiBA,KAAK,iBACrB,IAFH,mBAOJ,gCACIgB,EAAMK,KAAI,SAACC,GAAD,OAAU,cAAC,EAAD,CAA+Bb,KAAMa,GAA1BA,EAAKZ,0B,6ZCzE9C,IAEMa,EAAWC,yBAAe,CAC9BC,IAHe,mCAWXC,EAA2CC,KAAKC,4DAGhDC,EAAWC,aAAW,SAACC,EAAD,OAAMC,EAAN,EAAMA,QAAN,MAAqB,CAC/CA,QAAQ,2BACHA,GADE,IAELC,cAAeP,EAAK,iBAAaA,GAAU,SAIzCQ,EAAS,IAAIC,eAAa,CAC9BC,KAAMP,EAASQ,OAAOd,GACtBe,MAAO,IAAIC,kBAGPC,EAAkBC,cAAH,KCjBfC,EAAqB,SAAClE,EAAKmE,GAAc,IAAD,EAJ7B,SAACnE,GAAD,OACfD,EAASC,GAAKoE,MAAM,EAAG,GAIDC,CAASrE,GADa,mBACrCsE,EADqC,KAC9BC,EAD8B,KAE5Cb,EAAOc,MAAM,CACXA,MAAOR,EACPS,UAAW,CAAEH,QAAOC,UACnBG,MACD,SAACC,GAAD,OAAYR,EAASQ,OAkBVC,EAdG,WAAO,IAAD,EACIxE,qBADJ,mBACfoC,EADe,KACRqC,EADQ,KAEhBV,EAAW,SAACQ,GAAD,OACfE,EAASF,EAAOG,KAAKC,WAAWvC,MAAMwC,QAElCC,EAAczC,EAAQ,cAAC,EAAD,CAAaA,MAAOA,IAAY,KAC5D,OACE,eAAC,IAAD,WACE,cAAC,EAAD,CAASrC,SAAU,SAACH,GAAD,OAASkE,EAAmBlE,EAAKmE,MACnDc,M,QClBQC,EAXA,kBACb,wBAAQtE,UAAU,2BAAlB,SACE,cAAC,IAAD,CAAWA,UAAU,cAArB,SACE,+EAEGuE,Y,kBCsBMC,EA3BI,kBACjB,cAACC,EAAA,EAAD,CAAQC,GAAG,OAAOhE,QAAQ,OAAOiE,OAAO,KAAK3E,UAAU,OAAvD,SACE,eAAC,IAAD,WACE,eAACyE,EAAA,EAAOG,MAAR,CAAcC,KAAMrC,WAApB,UACE,cAAC,IAAD,CAAiB5B,KAAK,gBACrB,IAFH,aAKA,cAAC6D,EAAA,EAAOK,OAAR,IACA,cAACL,EAAA,EAAOM,SAAR,UACE,eAACC,EAAA,EAAD,CAAKhF,UAAU,UAAf,UACE,eAACgF,EAAA,EAAIC,KAAL,CAAUJ,KAAMrC,WAAhB,UACE,cAAC,IAAD,CAAiB5B,KAAK,SACrB,IAFH,UAKA,eAACoE,EAAA,EAAIC,KAAL,CAAUJ,KAAK,wCAAf,UACE,cAAC,IAAD,CAAiBjE,KAAM,CAAC,MAAO,gBAC9B,IAFH,sBCVVsE,IAAQC,IAAIC,IAAKC,KAYFC,MAVf,WACE,OACE,sBAAKtF,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCXNuF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.780246a1.chunk.js","sourcesContent":["const repoRegex = /https?:\\/\\/github.com\\/(\\w+)\\/(\\w+)/;\nconst urlMatch = (url) => (\n  url && url.match(repoRegex)\n);\n\nexport default urlMatch;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button, Form, FormControl, InputGroup,\n} from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport urlMatch from '../utils/validators';\n\nconst PopForm = ({ onSubmit }) => {\n  const [url, setUrl] = useState();\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (urlMatch(url) === null) {\n      e.stopPropagation();\n    } else {\n      onSubmit(url);\n    }\n  };\n  return (\n    <Form onSubmit={handleSubmit}>\n      <InputGroup className=\"mb-3\">\n        <FormControl\n          placeholder=\"https://github.com/django/django\"\n          onChange={(e) => setUrl(e.target.value)}\n          isInvalid={urlMatch(url) === null}\n        />\n        <InputGroup.Append>\n          <Button type=\"submit\" variant=\"outline-secondary\" onClick={handleSubmit}>\n            <FontAwesomeIcon icon=\"search\" />\n          </Button>\n        </InputGroup.Append>\n      </InputGroup>\n    </Form>\n  );\n};\nPopForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default PopForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n/**\n * https://stackoverflow.com/a/3177838\n */\nconst timeSince = (date) => {\n  const seconds = Math.floor((new Date() - date) / 1000);\n  let interval = seconds / 31536000;\n  if (interval > 1) {\n    return `${Math.floor(interval)} years ago`;\n  }\n  interval = seconds / 2592000;\n  if (interval > 1) {\n    return `${Math.floor(interval)} months ago`;\n  }\n  interval = seconds / 86400;\n  if (interval > 1) {\n    return `${Math.floor(interval)} days ago`;\n  }\n  interval = seconds / 3600;\n  if (interval > 1) {\n    return `${Math.floor(interval)} hours ago`;\n  }\n  interval = seconds / 60;\n  if (interval > 1) {\n    return `${Math.floor(interval)} minutes ago`;\n  }\n  return `${Math.floor(seconds)} seconds ago`;\n};\n\nconst Fork = ({ info }) => (\n  <tr>\n    <td>{info.nameWithOwner}</td>\n    <td>{info.stargazerCount}</td>\n    <td>{info.forkCount}</td>\n    <td>{timeSince(Date.parse(info.pushedAt))}</td>\n  </tr>\n);\nFork.propTypes = {\n  info: PropTypes.shape({\n    nameWithOwner: PropTypes.string.isRequired,\n    stargazerCount: PropTypes.number.isRequired,\n    forkCount: PropTypes.number.isRequired,\n    pushedAt: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nconst ResultTable = ({ forks }) => (\n  <>\n    <Table striped bordered hover>\n      <thead>\n        <tr>\n          <th>\n            <FontAwesomeIcon icon={['fab', 'github-alt']} />\n            {' '}\n            Repo\n          </th>\n          <th>\n            <FontAwesomeIcon icon=\"star\" />\n            {' '}\n            Stars\n          </th>\n          <th>\n            <FontAwesomeIcon icon=\"code-branch\" />\n            {' '}\n            Forks\n          </th>\n          <th>\n            <FontAwesomeIcon icon=\"calendar-alt\" />\n            {' '}\n            Modified\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        { forks.map((fork) => <Fork key={fork.nameWithOwner} info={fork} />)}\n      </tbody>\n    </Table>\n  </>\n);\nResultTable.propTypes = {\n  forks: PropTypes.arrayOf(Fork.propTypes.info).isRequired,\n};\n\nexport default ResultTable;\n","import {\n  gql, ApolloClient, createHttpLink, InMemoryCache,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst endpoint = 'https://api.github.com/graphql';\n\nconst httpLink = createHttpLink({\n  uri: endpoint,\n});\n\n/**\n * Base64 to trick GitHub hooks so the token doesn't seem leaded in the commit.\n * Note this token will be accessible from the frontend hence should be very restricted.\n * Only the `public_repo` scope is required.\n */\nconst token = process.env.REACT_APP_GITHUB_PAT ? atob(process.env.REACT_APP_GITHUB_PAT) : null;\n// console.assert(token, \"REACT_APP_GITHUB_PAT environment variable must be set\");\n\nconst authLink = setContext((_, { headers }) => ({\n  headers: {\n    ...headers,\n    authorization: token ? `Bearer ${token}` : '',\n  },\n}));\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nconst GET_FORKS_QUERY = gql`\n  query Forks($owner: String! $name: String!) {\n    repository(owner: $owner, name: $name) {\n      forks(first: 100, orderBy: {field: STARGAZERS, direction: DESC}) {\n        nodes {\n          nameWithOwner\n          stargazerCount\n          forkCount\n          pushedAt\n        }\n      }\n    }\n  }\n`;\n\nexport {\n  client,\n  GET_FORKS_QUERY,\n};\n","import React, { useState } from 'react';\nimport { Container as ReactContainer } from 'react-bootstrap';\nimport PopForm from './PopForm';\nimport ResultTable from './ResultTable';\nimport { client, GET_FORKS_QUERY } from '../utils/graphql';\nimport urlMatch from '../utils/validators';\n\n/**\n * Splits URL to owner and repo name.\n */\nconst splitUrl = (url) => (\n  urlMatch(url).slice(1, 3)\n);\n\nconst searchPopularForks = (url, onResult) => {\n  const [owner, name] = splitUrl(url);\n  client.query({\n    query: GET_FORKS_QUERY,\n    variables: { owner, name },\n  }).then(\n    (result) => onResult(result),\n  );\n};\n\nconst Container = () => {\n  const [forks, setForks] = useState();\n  const onResult = (result) => (\n    setForks(result.data.repository.forks.nodes)\n  );\n  const resultTable = forks ? <ResultTable forks={forks} /> : null;\n  return (\n    <ReactContainer>\n      <PopForm onSubmit={(url) => searchPopularForks(url, onResult)} />\n      {resultTable}\n    </ReactContainer>\n  );\n};\n\nexport default Container;\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { version } from '../../package.json';\n\nconst Footer = () => (\n  <footer className=\"footer d-none d-md-block\">\n    <Container className=\"text-center\">\n      <span>\n        Copyright &copy; Andre Miras 2020 - gitpop3 v\n        {version}\n      </span>\n    </Container>\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\nimport { Container, Nav, Navbar } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Navigation = () => (\n  <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\" className=\"mb-4\">\n    <Container>\n      <Navbar.Brand href={process.env.PUBLIC_URL}>\n        <FontAwesomeIcon icon=\"code-branch\" />\n        {' '}\n        GitPop3\n      </Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href={process.env.PUBLIC_URL}>\n            <FontAwesomeIcon icon=\"home\" />\n            {' '}\n            Home\n          </Nav.Link>\n          <Nav.Link href=\"https://github.com/AndreMiras/gitpop3\">\n            <FontAwesomeIcon icon={['fab', 'github-alt']} />\n            {' '}\n            About\n          </Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Container>\n  </Navbar>\n);\n\nexport default Navigation;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport Container from './components/Container';\nimport Footer from './components/Footer';\nimport Navigation from './components/Navigation';\n\nlibrary.add(fab, fas);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation />\n      <Container />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}