{"version":3,"sources":["components/PopForm.jsx","components/ResultTable.jsx","utils/graphql.js","components/Container.jsx","components/Footer.jsx","components/Navigation.jsx","App.jsx","index.jsx"],"names":["PopForm","onSubmit","useState","url","setUrl","InputGroup","className","FormControl","placeholder","onChange","e","target","value","Append","Button","variant","onClick","icon","Fork","info","nameWithOwner","ResultTable","forks","Table","striped","bordered","hover","map","fork","httpLink","createHttpLink","uri","token","atob","process","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","GET_FORKS_QUERY","gql","re","searchPopularForks","onResult","match","slice","splitUrl","owner","name","query","variables","then","result","Container","setForks","data","repository","nodes","resultTable","Footer","version","Navigation","Navbar","bg","expand","Brand","href","Toggle","Collapse","Nav","Link","library","add","fab","fas","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAyBeA,EApBC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACVC,qBADU,mBACzBC,EADyB,KACpBC,EADoB,KAEhC,OACE,eAACC,EAAA,EAAD,CAAYC,UAAU,OAAtB,UACE,cAACC,EAAA,EAAD,CACEC,YAAY,mCACZC,SAAU,SAACC,GAAD,OAAON,EAAOM,EAAEC,OAAOC,UAEnC,cAACP,EAAA,EAAWQ,OAAZ,UACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,oBAAoBC,QAAS,kBAAMf,EAASE,IAA5D,SACE,cAAC,IAAD,CAAiBc,KAAK,mB,SCV1BC,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACX,+BACE,6BAAKA,EAAKC,gBACV,uCACA,uCACA,8CA8CWC,EArCK,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAClB,mCACE,eAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACE,gCACE,+BACE,+BACE,cAAC,IAAD,CAAiBT,KAAM,CAAC,MAAO,gBAC9B,IAFH,UAKA,+BACE,cAAC,IAAD,CAAiBA,KAAK,SACrB,IAFH,WAKA,+BACE,cAAC,IAAD,CAAiBA,KAAK,gBACrB,IAFH,WAKA,+BACE,cAAC,IAAD,CAAiBA,KAAK,iBACrB,IAFH,mBAOJ,gCACIK,EAAMK,KAAI,SAACC,GAAD,OAAU,cAAC,EAAD,CAAMT,KAAMS,e,0SC1C1C,IAEMC,EAAWC,yBAAe,CAC9BC,IAHe,mCAWXC,EAA2CC,KAAKC,4DAGhDC,EAAWC,aAAW,SAACC,EAAD,OAAMC,EAAN,EAAMA,QAAN,MAAqB,CAC/CA,QAAQ,2BACHA,GADE,IAELC,cAAeP,EAAK,iBAAaA,GAAU,SAIzCQ,EAAS,IAAIC,eAAa,CAC9BC,KAAMP,EAASQ,OAAOd,GACtBe,MAAO,IAAIC,kBAGPC,EAAkBC,cAAH,KCzBfC,EAAK,qCAQLC,EAAqB,SAAC9C,EAAK+C,GAAc,IAAD,EAJ7B,SAAC/C,GAAD,OACfA,EAAIgD,MAAMH,GAAII,MAAM,EAAG,GAIDC,CAASlD,GADa,mBACrCmD,EADqC,KAC9BC,EAD8B,KAE5Cf,EAAOgB,MAAM,CACXA,MAAOV,EACPW,UAAW,CAAEH,QAAOC,UACnBG,MACD,SAACC,GAAD,OAAYT,EAASS,OAkBVC,EAdG,WAAO,IAAD,EACI1D,qBADJ,mBACfoB,EADe,KACRuC,EADQ,KAEhBX,EAAW,SAACS,GAAD,OACfE,EAASF,EAAOG,KAAKC,WAAWzC,MAAM0C,QAElCC,EAAc3C,EAAQ,cAAC,EAAD,CAAaA,MAAOA,IAAY,KAC5D,OACE,eAAC,IAAD,WACE,cAAC,EAAD,CAASrB,SAAU,SAACE,GAAD,OAAS8C,EAAmB9C,EAAK+C,MACnDe,M,QClBQC,EAXA,kBACb,wBAAQ5D,UAAU,2BAAlB,SACE,cAAC,IAAD,CAAWA,UAAU,cAArB,SACE,+EAEG6D,Y,kBCsBMC,EA3BI,kBACjB,cAACC,EAAA,EAAD,CAAQC,GAAG,OAAOvD,QAAQ,OAAOwD,OAAO,KAAKjE,UAAU,OAAvD,SACE,eAAC,IAAD,WACE,eAAC+D,EAAA,EAAOG,MAAR,CAAcC,KAAMvC,WAApB,UACE,cAAC,IAAD,CAAiBjB,KAAK,gBACrB,IAFH,aAKA,cAACoD,EAAA,EAAOK,OAAR,IACA,cAACL,EAAA,EAAOM,SAAR,UACE,eAACC,EAAA,EAAD,CAAKtE,UAAU,UAAf,UACE,eAACsE,EAAA,EAAIC,KAAL,CAAUJ,KAAMvC,WAAhB,UACE,cAAC,IAAD,CAAiBjB,KAAK,SACrB,IAFH,UAKA,eAAC2D,EAAA,EAAIC,KAAL,CAAUJ,KAAK,wCAAf,UACE,cAAC,IAAD,CAAiBxD,KAAM,CAAC,MAAO,gBAC9B,IAFH,sBCVV6D,IAAQC,IAAIC,IAAKC,KAYFC,MAVf,WACE,OACE,sBAAK5E,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCXN6E,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.4da01ca2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, FormControl, InputGroup } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst PopForm = ({ onSubmit }) => {\n  const [url, setUrl] = useState();\n  return (\n    <InputGroup className=\"mb-3\">\n      <FormControl\n        placeholder=\"https://github.com/django/django\"\n        onChange={(e) => setUrl(e.target.value)}\n      />\n      <InputGroup.Append>\n        <Button variant=\"outline-secondary\" onClick={() => onSubmit(url)}>\n          <FontAwesomeIcon icon=\"search\" />\n        </Button>\n      </InputGroup.Append>\n    </InputGroup>\n  );\n};\nPopForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default PopForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Fork = ({ info }) => (\n  <tr>\n    <td>{info.nameWithOwner}</td>\n    <td>Stars</td>\n    <td>Forks</td>\n    <td>Modified</td>\n  </tr>\n);\nFork.propTypes = {\n  info: PropTypes.shape({\n    nameWithOwner: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nconst ResultTable = ({ forks }) => (\n  <>\n    <Table striped bordered hover>\n      <thead>\n        <tr>\n          <th>\n            <FontAwesomeIcon icon={['fab', 'github-alt']} />\n            {' '}\n            Repo\n          </th>\n          <th>\n            <FontAwesomeIcon icon=\"star\" />\n            {' '}\n            Stars\n          </th>\n          <th>\n            <FontAwesomeIcon icon=\"code-branch\" />\n            {' '}\n            Forks\n          </th>\n          <th>\n            <FontAwesomeIcon icon=\"calendar-alt\" />\n            {' '}\n            Modified\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        { forks.map((fork) => <Fork info={fork} />)}\n      </tbody>\n    </Table>\n  </>\n);\nResultTable.propTypes = {\n  forks: PropTypes.arrayOf(Fork.propTypes.info).isRequired,\n};\n\nexport default ResultTable;\n","import {\n  gql, ApolloClient, createHttpLink, InMemoryCache,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst endpoint = 'https://api.github.com/graphql';\n\nconst httpLink = createHttpLink({\n  uri: endpoint,\n});\n\n/**\n * Base64 to trick GitHub hooks so the token doesn't seem leaded in the commit.\n * Note this token will be accessible from the frontend hence should be very restricted.\n * Only the `public_repo` scope is required.\n */\nconst token = process.env.REACT_APP_GITHUB_PAT ? atob(process.env.REACT_APP_GITHUB_PAT) : null;\n// console.assert(token, \"REACT_APP_GITHUB_PAT environment variable must be set\");\n\nconst authLink = setContext((_, { headers }) => ({\n  headers: {\n    ...headers,\n    authorization: token ? `Bearer ${token}` : '',\n  },\n}));\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nconst GET_FORKS_QUERY = gql`\n  query Forks($owner: String! $name: String!) {\n    repository(owner: $owner, name: $name) {\n      forks(first: 10) {\n        nodes {\n          nameWithOwner\n        }\n      }\n    }\n  }\n`;\n\nexport {\n  client,\n  GET_FORKS_QUERY,\n};\n","import React, { useState } from 'react';\nimport { Container as ReactContainer } from 'react-bootstrap';\nimport PopForm from './PopForm';\nimport ResultTable from './ResultTable';\nimport { client, GET_FORKS_QUERY } from '../utils/graphql';\n\nconst re = /https:\\/\\/github.com\\/(\\w+)\\/(\\w+)/;\n/**\n * Splits URL to owner and repo name.\n */\nconst splitUrl = (url) => (\n  url.match(re).slice(1, 3)\n);\n\nconst searchPopularForks = (url, onResult) => {\n  const [owner, name] = splitUrl(url);\n  client.query({\n    query: GET_FORKS_QUERY,\n    variables: { owner, name },\n  }).then(\n    (result) => onResult(result),\n  );\n};\n\nconst Container = () => {\n  const [forks, setForks] = useState();\n  const onResult = (result) => (\n    setForks(result.data.repository.forks.nodes)\n  );\n  const resultTable = forks ? <ResultTable forks={forks} /> : null;\n  return (\n    <ReactContainer>\n      <PopForm onSubmit={(url) => searchPopularForks(url, onResult)} />\n      {resultTable}\n    </ReactContainer>\n  );\n};\n\nexport default Container;\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { version } from '../../package.json';\n\nconst Footer = () => (\n  <footer className=\"footer d-none d-md-block\">\n    <Container className=\"text-center\">\n      <span>\n        Copyright &copy; Andre Miras 2020 - gitpop3 v\n        {version}\n      </span>\n    </Container>\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\nimport { Container, Nav, Navbar } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Navigation = () => (\n  <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\" className=\"mb-4\">\n    <Container>\n      <Navbar.Brand href={process.env.PUBLIC_URL}>\n        <FontAwesomeIcon icon=\"code-branch\" />\n        {' '}\n        GitPop3\n      </Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href={process.env.PUBLIC_URL}>\n            <FontAwesomeIcon icon=\"home\" />\n            {' '}\n            Home\n          </Nav.Link>\n          <Nav.Link href=\"https://github.com/AndreMiras/gitpop3\">\n            <FontAwesomeIcon icon={['fab', 'github-alt']} />\n            {' '}\n            About\n          </Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Container>\n  </Navbar>\n);\n\nexport default Navigation;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport Container from './components/Container';\nimport Footer from './components/Footer';\nimport Navigation from './components/Navigation';\n\nlibrary.add(fab, fas);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation />\n      <Container />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}